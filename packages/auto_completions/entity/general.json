{
    "components": "$entity.annotations and $entity.behavior and $entity.components and $dynamic.plugins.custom_components",
    "beta_components": "$entity.annotations and $entity.behavior and $entity.components and $entity.beta_components and $dynamic.plugins.custom_components",
    "built_in_event": ["minecraft:entity_born", "minecraft:entity_spawned", "minecraft:entity_transformed", "minecraft:on_prime", "minecraft:start_celebrating"],
    "effect_definition": {
        "effect": "$general.effect_name",
        "duration": "$general.number",
        "amplifier": "$general.number",
        "visible": "$general.boolean",
        "ambient": "$general.boolean",
        "display_on_screen_animation": "$general.boolean"
    },
    "component_group_name": {
        "@meta": {
            "is_value": true,
            "validate": "entity/groupName.js"
        },
        "@import.value": "$dynamic.entity.component_groups"
    },
    "event_string": {
        "@meta": {
            "validate": "entity/eventName.js"
        },
        "@import.value": "$dynamic.entity.events"
    },
    "event_definition": {
        "$dynamic.list.next_index": "$entity.general.internal_event_definition",
        "$load": "$entity.general.internal_event_definition"
    },
    "internal_event_definition": {
        "filters": "$entity.filters",
        "$dynamic_template.event": {
            "$key": "$dynamic.siblings.target",

            "$fallback": {
                "@meta": {
                    "validate": "entity/eventName.js"
                },
                "@import.value.local_events": "$dynamic.entity.events"
            },
            "$default": {
                "@meta": {
                    "validate": "entity/eventName.js"
                },
                "@import.value.all_events_1": "$dynamic.cache.entity.events"
            },

            "self": {
                "@meta": {
                    "validate": "entity/eventName.js"
                },
                "@import.value.all_events_2": "$dynamic.entity.events"
            }
        },
        "target": "$entity.general.filter_targets"
    },
    "entity_types": {
        "$dynamic.list.next_index": {
            "filters": "$entity.filters",
            "max_dist": "$general.number",
            "must_see": "$general.boolean",
            "check_if_outnumbered": "$general.boolean",
            "sprint_speed_multiplier": "$general.decimal",
            "walk_speed_multiplier": "$general.decimal"
        }
    },
    "prioritized_entity_types": {
        "$dynamic.list.next_index": {
            "priority": "$general.number",
            "filters": "$entity.filters",
            "max_dist": "$general.number",
            "must_see": "$general.boolean",
            "sprint_speed_multiplier": "$general.decimal",
            "walk_speed_multiplier": "$general.decimal"

        }
    },
    "particle_definition": {
        "particle_type": "$general.particle_name",
        "particle_y_offset": "$general.decimal",
        "particle_offset_towards_interactor": "$general.boolean"
    },
    "filters": [
        "clock_time", "distance_to_nearest_player", "hourly_clock_time", "has_ability", "has_biome_tag", "has_container_open", "has_component", "has_damage", "has_equipment", "has_mob_effect", "has_ranged_weapon", "has_tag", "has_target", "has_trade_supply", "in_caravan", "in_clouds", "in_lava", "in_nether", "in_water", "in_water_or_rain", "inactivity_timer", "is_altitude", "is_avoiding_mobs", "is_biome", "is_block", "is_brightness", "is_climbing", "is_color", "is_daytime", "is_difficulty", "is_family", "is_game_rule", "is_humid", "is_immobile", "is_in_village", "is_leashed", "is_leashed_to", "is_moving", "is_owner", "is_persistent", "is_riding", "is_skin_id", "is_sleeping", "is_sneaking", "is_snow_covered", "is_target", "is_temperature_type", "is_temperature_value", "is_underground", "is_underwater", "is_variant", "is_visible", "light_level", "moon_intensity", "moon_phase", "on_ground", "on_ladder", "random_chance", "rider_count", "surface_mob", "trusts", "weather", "weather_at_position"
    ],
    "filters_beta": [],
    "filter_targets": {
        "@meta": {
            "validate": "entity/filterTarget.js"
        },
        "@import.value": ["other", "parent", "player", "self", "target", "baby", "block", "damager"]
    },
    "filter_operators": ["==", "!=", "<", "<=", "<>", "=", ">", ">=", "equals", "not"],
    "family": {
        "@meta": {
            "is_value": true,
            "definitions": ["entity"]
        },
        "@import.value.family": "$dynamic.cache.entity.families"
    }
}